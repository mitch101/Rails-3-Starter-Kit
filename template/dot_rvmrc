#!/usr/bin/env bash

# This is an RVM Project .rvmrc file, used to automatically load the ruby
# development environment upon cd'ing into the directory.
# For more info, see: http://beginrescueend.com/

ruby_string="[ruby_version]"
gemset_name="[app_name]"

# Ensure we have the right ruby installed to use this project.
if rvm list strings | grep -q "${ruby_string}" ; then

  # Load or create the specified environment
  #   We attempt to load the desired environment directly from the environment
  #   file. This is very fast and efficient compared to running through the entire
  #   CLI and selector. If you want feedback on which environment was used then
  #   insert the word 'use' after --create as this triggers verbose mode.
  if [[ -d "${rvm_path:-$HOME/.rvm}/environments" \
    && -s "${rvm_path:-$HOME/.rvm}/environments/${ruby_string}@${gemset_name}" ]] ; then
    \. "${rvm_path:-$HOME/.rvm}/environments/${ruby_string}@${gemset_name}"
  else
    # If the environment file has not yet been created, use the RVM CLI to select.
    if ! rvm --create  "${ruby_string}@${gemset_name}"
    then
      echo "Failed to create RVM environment '$environment_id'."
    fi
    
  fi

  # Ensure that Bundler is installed, install it if it is not.
  bundler_installed=`gem list bundler | grep bundler`
  if [ -z "$bundler_installed" ]; then
    gem install bundler
  fi

  # Bundle while redcing excess noise.
  echo "Ensuring your bundle is up to date."
  bundle | grep -v 'Using' | grep -v 'complete' | sed '/^$/d'

else

  # Notify the user to install the desired interpreter before proceeding.
  echo "${ruby_string} was not found, please run 'rvm install ${ruby_string}' and then cd back into the project directory."

fi